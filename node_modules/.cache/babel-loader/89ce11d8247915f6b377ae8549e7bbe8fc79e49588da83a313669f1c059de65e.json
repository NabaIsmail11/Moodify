{"ast":null,"code":"export const getTopSongs = async () => {\n  try {\n    const response = await fetch('https://api.deezer.com/chart/0/tracks?limit=20');\n    const data = await response.json();\n    return data.data.map(song => ({\n      id: song.id,\n      title: song.title,\n      artist: song.artist.name,\n      duration: formatDuration(song.duration),\n      album: song.album.title,\n      cover: song.album.cover_medium,\n      preview: song.preview\n    }));\n  } catch (error) {\n    console.error('Error fetching Deezer top songs:', error);\n    return [];\n  }\n};\nexport const searchSongsByMood = async mood => {\n  // Map moods to Deezer search queries\n  const moodQueries = {\n    happy: 'happy',\n    sad: 'sad',\n    angry: 'angry',\n    calm: 'chill',\n    tired: 'relax',\n    energetic: 'energy'\n  };\n  const query = moodQueries[mood.toLowerCase()] || mood;\n  try {\n    const response = await fetch(`https://api.deezer.com/search?q=${query}&order=RATING_DESC&limit=10`);\n    const data = await response.json();\n    return data.data.map(song => ({\n      id: song.id,\n      title: song.title,\n      artist: song.artist.name,\n      duration: formatDuration(song.duration),\n      cover: song.album.cover_medium,\n      preview: song.preview\n    }));\n  } catch (error) {\n    console.error('Error fetching mood-based songs:', error);\n    return [];\n  }\n};\nconst formatDuration = seconds => {\n  const mins = Math.floor(seconds / 60);\n  const secs = seconds % 60;\n  return `${mins}:${secs.toString().padStart(2, '0')}`;\n};","map":{"version":3,"names":["getTopSongs","response","fetch","data","json","map","song","id","title","artist","name","duration","formatDuration","album","cover","cover_medium","preview","error","console","searchSongsByMood","mood","moodQueries","happy","sad","angry","calm","tired","energetic","query","toLowerCase","seconds","mins","Math","floor","secs","toString","padStart"],"sources":["C:/Users/nabai/Desktop/moodify/moodify/src/services/deezerapi.js"],"sourcesContent":["export const getTopSongs = async () => {\r\n    try {\r\n      const response = await fetch('https://api.deezer.com/chart/0/tracks?limit=20');\r\n      const data = await response.json();\r\n      return data.data.map(song => ({\r\n        id: song.id,\r\n        title: song.title,\r\n        artist: song.artist.name,\r\n        duration: formatDuration(song.duration),\r\n        album: song.album.title,\r\n        cover: song.album.cover_medium,\r\n        preview: song.preview\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error fetching Deezer top songs:', error);\r\n      return [];\r\n    }\r\n  };\r\n  \r\n  export const searchSongsByMood = async (mood) => {\r\n    // Map moods to Deezer search queries\r\n    const moodQueries = {\r\n      happy: 'happy',\r\n      sad: 'sad',\r\n      angry: 'angry',\r\n      calm: 'chill',\r\n      tired: 'relax',\r\n      energetic: 'energy'\r\n    };\r\n  \r\n    const query = moodQueries[mood.toLowerCase()] || mood;\r\n    \r\n    try {\r\n      const response = await fetch(`https://api.deezer.com/search?q=${query}&order=RATING_DESC&limit=10`);\r\n      const data = await response.json();\r\n      return data.data.map(song => ({\r\n        id: song.id,\r\n        title: song.title,\r\n        artist: song.artist.name,\r\n        duration: formatDuration(song.duration),\r\n        cover: song.album.cover_medium,\r\n        preview: song.preview\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error fetching mood-based songs:', error);\r\n      return [];\r\n    }\r\n  };\r\n  \r\n  const formatDuration = (seconds) => {\r\n    const mins = Math.floor(seconds / 60);\r\n    const secs = seconds % 60;\r\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\r\n  };"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAG,MAAAA,CAAA,KAAY;EACnC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gDAAgD,CAAC;IAC9E,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACA,IAAI,CAACE,GAAG,CAACC,IAAI,KAAK;MAC5BC,EAAE,EAAED,IAAI,CAACC,EAAE;MACXC,KAAK,EAAEF,IAAI,CAACE,KAAK;MACjBC,MAAM,EAAEH,IAAI,CAACG,MAAM,CAACC,IAAI;MACxBC,QAAQ,EAAEC,cAAc,CAACN,IAAI,CAACK,QAAQ,CAAC;MACvCE,KAAK,EAAEP,IAAI,CAACO,KAAK,CAACL,KAAK;MACvBM,KAAK,EAAER,IAAI,CAACO,KAAK,CAACE,YAAY;MAC9BC,OAAO,EAAEV,IAAI,CAACU;IAChB,CAAC,CAAC,CAAC;EACL,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,OAAO,EAAE;EACX;AACF,CAAC;AAED,OAAO,MAAME,iBAAiB,GAAG,MAAOC,IAAI,IAAK;EAC/C;EACA,MAAMC,WAAW,GAAG;IAClBC,KAAK,EAAE,OAAO;IACdC,GAAG,EAAE,KAAK;IACVC,KAAK,EAAE,OAAO;IACdC,IAAI,EAAE,OAAO;IACbC,KAAK,EAAE,OAAO;IACdC,SAAS,EAAE;EACb,CAAC;EAED,MAAMC,KAAK,GAAGP,WAAW,CAACD,IAAI,CAACS,WAAW,CAAC,CAAC,CAAC,IAAIT,IAAI;EAErD,IAAI;IACF,MAAMnB,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC0B,KAAK,6BAA6B,CAAC;IACnG,MAAMzB,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACA,IAAI,CAACE,GAAG,CAACC,IAAI,KAAK;MAC5BC,EAAE,EAAED,IAAI,CAACC,EAAE;MACXC,KAAK,EAAEF,IAAI,CAACE,KAAK;MACjBC,MAAM,EAAEH,IAAI,CAACG,MAAM,CAACC,IAAI;MACxBC,QAAQ,EAAEC,cAAc,CAACN,IAAI,CAACK,QAAQ,CAAC;MACvCG,KAAK,EAAER,IAAI,CAACO,KAAK,CAACE,YAAY;MAC9BC,OAAO,EAAEV,IAAI,CAACU;IAChB,CAAC,CAAC,CAAC;EACL,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,OAAO,EAAE;EACX;AACF,CAAC;AAED,MAAML,cAAc,GAAIkB,OAAO,IAAK;EAClC,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,GAAG,EAAE,CAAC;EACrC,MAAMI,IAAI,GAAGJ,OAAO,GAAG,EAAE;EACzB,OAAO,GAAGC,IAAI,IAAIG,IAAI,CAACC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;AACtD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}