{"ast":null,"code":"const clientId = process.env.REACT_APP_SPOTIFY_CLIENT_ID;\nconst clientSecret = process.env.REACT_APP_SPOTIFY_CLIENT_SECRET;\nconst CORS_PROXY = \"https://cors-anywhere.herokuapp.com/\"; // Temporary fix for CORS\nlet accessToken = null;\n\n// Function to fetch the Spotify Access Token\nexport const getAccessToken = async () => {\n  if (accessToken) return accessToken;\n  try {\n    const credentials = `${clientId}:${clientSecret}`;\n    const encodedCredentials = btoa(credentials);\n    const response = await fetch(`${CORS_PROXY}https://accounts.spotify.com/api/token`, {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": `Basic ${encodedCredentials}`,\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      },\n      body: new URLSearchParams({\n        grant_type: \"client_credentials\"\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      console.error(\"Error fetching token:\", errorData);\n      throw new Error(`Spotify Auth Failed: ${errorData.error_description}`);\n    }\n    const data = await response.json();\n    accessToken = data.access_token;\n    return accessToken;\n  } catch (error) {\n    console.error(\"Failed to get Spotify access token:\", error);\n    throw error;\n  }\n};\n\n// Function to fetch top songs from a Spotify playlist\nexport const getTopSongs = async () => {\n  try {\n    const token = await getAccessToken();\n    const playlistId = \"37i9dQZF1DXcBWIGoYBM5M\"; // Example: Today's Top Hits playlist\n\n    const response = await fetch(`${CORS_PROXY}https://api.spotify.com/v1/playlists/${playlistId}/tracks?limit=10`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      console.error(\"Error fetching playlist:\", response.statusText);\n      throw new Error(\"Failed to fetch playlist\");\n    }\n    const {\n      items\n    } = await response.json();\n    return items.map(({\n      track\n    }, index) => {\n      var _track$album$images$;\n      return {\n        id: track.id,\n        rank: index + 1,\n        title: track.name,\n        artist: track.artists.map(a => a.name).join(\", \"),\n        duration: Math.floor(track.duration_ms / 1000),\n        cover: ((_track$album$images$ = track.album.images[0]) === null || _track$album$images$ === void 0 ? void 0 : _track$album$images$.url) || \"https://via.placeholder.com/60\",\n        preview: track.preview_url || null\n      };\n    });\n  } catch (error) {\n    console.error(\"Using fallback data due to error:\", error);\n    return fallbackTopSongs.map((song, index) => ({\n      ...song,\n      rank: index + 1\n    }));\n  }\n};\n\n// Fallback Data\nconst fallbackTopSongs = [{\n  id: 1,\n  title: \"Blinding Lights\",\n  artist: \"The Weeknd\",\n  duration: 200,\n  cover: \"https://i.scdn.co/image/ab67616d00001e02a935e865e7c4b776ef753a05\",\n  preview: null\n}, {\n  id: 2,\n  title: \"Save Your Tears\",\n  artist: \"The Weeknd\",\n  duration: 215,\n  cover: \"https://i.scdn.co/image/ab67616d00001e02a935e865e7c4b776ef753a05\",\n  preview: null\n}];","map":{"version":3,"names":["clientId","process","env","REACT_APP_SPOTIFY_CLIENT_ID","clientSecret","REACT_APP_SPOTIFY_CLIENT_SECRET","CORS_PROXY","accessToken","getAccessToken","credentials","encodedCredentials","btoa","response","fetch","method","headers","body","URLSearchParams","grant_type","ok","errorData","json","console","error","Error","error_description","data","access_token","getTopSongs","token","playlistId","Authorization","statusText","items","map","track","index","_track$album$images$","id","rank","title","name","artist","artists","a","join","duration","Math","floor","duration_ms","cover","album","images","url","preview","preview_url","fallbackTopSongs","song"],"sources":["C:/Users/S P E C T R E/Downloads/moodify/moodify/moodify/src/services/spotifyapi.js"],"sourcesContent":["const clientId = process.env.REACT_APP_SPOTIFY_CLIENT_ID;\r\nconst clientSecret = process.env.REACT_APP_SPOTIFY_CLIENT_SECRET;\r\nconst CORS_PROXY = \"https://cors-anywhere.herokuapp.com/\"; // Temporary fix for CORS\r\nlet accessToken = null;\r\n\r\n// Function to fetch the Spotify Access Token\r\nexport const getAccessToken = async () => {\r\n  if (accessToken) return accessToken;\r\n\r\n  try {\r\n    const credentials = `${clientId}:${clientSecret}`;\r\n    const encodedCredentials = btoa(credentials);\r\n\r\n    const response = await fetch(`${CORS_PROXY}https://accounts.spotify.com/api/token`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Authorization\": `Basic ${encodedCredentials}`,\r\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n      },\r\n      body: new URLSearchParams({ grant_type: \"client_credentials\" }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      console.error(\"Error fetching token:\", errorData);\r\n      throw new Error(`Spotify Auth Failed: ${errorData.error_description}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    accessToken = data.access_token;\r\n    return accessToken;\r\n  } catch (error) {\r\n    console.error(\"Failed to get Spotify access token:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Function to fetch top songs from a Spotify playlist\r\nexport const getTopSongs = async () => {\r\n  try {\r\n    const token = await getAccessToken();\r\n    const playlistId = \"37i9dQZF1DXcBWIGoYBM5M\"; // Example: Today's Top Hits playlist\r\n\r\n    const response = await fetch(`${CORS_PROXY}https://api.spotify.com/v1/playlists/${playlistId}/tracks?limit=10`, {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      console.error(\"Error fetching playlist:\", response.statusText);\r\n      throw new Error(\"Failed to fetch playlist\");\r\n    }\r\n\r\n    const { items } = await response.json();\r\n\r\n    return items.map(({ track }, index) => ({\r\n      id: track.id,\r\n      rank: index + 1,\r\n      title: track.name,\r\n      artist: track.artists.map((a) => a.name).join(\", \"),\r\n      duration: Math.floor(track.duration_ms / 1000),\r\n      cover: track.album.images[0]?.url || \"https://via.placeholder.com/60\",\r\n      preview: track.preview_url || null,\r\n    }));\r\n  } catch (error) {\r\n    console.error(\"Using fallback data due to error:\", error);\r\n    return fallbackTopSongs.map((song, index) => ({\r\n      ...song,\r\n      rank: index + 1,\r\n    }));\r\n  }\r\n};\r\n\r\n// Fallback Data\r\nconst fallbackTopSongs = [\r\n  {\r\n    id: 1,\r\n    title: \"Blinding Lights\",\r\n    artist: \"The Weeknd\",\r\n    duration: 200,\r\n    cover: \"https://i.scdn.co/image/ab67616d00001e02a935e865e7c4b776ef753a05\",\r\n    preview: null,\r\n  },\r\n  {\r\n    id: 2,\r\n    title: \"Save Your Tears\",\r\n    artist: \"The Weeknd\",\r\n    duration: 215,\r\n    cover: \"https://i.scdn.co/image/ab67616d00001e02a935e865e7c4b776ef753a05\",\r\n    preview: null,\r\n  },\r\n];\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}