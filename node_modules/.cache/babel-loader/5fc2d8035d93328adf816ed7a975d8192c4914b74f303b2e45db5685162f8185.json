{"ast":null,"code":"const API_BASE = process.env.REACT_APP_PROXY_URL || 'http://localhost:3001/api/deezer';\nconst formatDuration = seconds => {\n  const mins = Math.floor(seconds / 60);\n  const secs = seconds % 60;\n  return `${mins}:${secs.toString().padStart(2, '0')}`;\n};\nexport const searchSongsByMood = async mood => {\n  const moodQueries = {\n    happy: 'happy',\n    sad: 'sad',\n    angry: 'angry',\n    calm: 'chill',\n    tired: 'relax',\n    energetic: 'energy'\n  };\n  const query = moodQueries[mood.toLowerCase()] || mood;\n  try {\n    const response = await fetch(`${API_BASE}/search?q=${query}&limit=10`);\n    if (!response.ok) throw new Error('Network response was not ok');\n    const data = await response.json();\n    return data.data.map(song => ({\n      id: song.id,\n      title: song.title,\n      artist: song.artist.name,\n      duration: formatDuration(song.duration),\n      cover: song.album.cover_medium,\n      preview: song.preview\n    }));\n  } catch (error) {\n    console.error('Error fetching mood-based songs:', error);\n    return [];\n  }\n};\nexport const getTopSongs = async () => {\n  try {\n    const response = await fetch(`${API_BASE}/top?limit=20`);\n    if (!response.ok) throw new Error('Network response was not ok');\n    const data = await response.json();\n    return data.data.map(song => ({\n      id: song.id,\n      title: song.title,\n      artist: song.artist.name,\n      duration: formatDuration(song.duration),\n      album: song.album.title,\n      cover: song.album.cover_medium,\n      preview: song.preview\n    }));\n  } catch (error) {\n    console.error('Error fetching top songs:', error);\n    return [];\n  }\n};","map":{"version":3,"names":["API_BASE","process","env","REACT_APP_PROXY_URL","formatDuration","seconds","mins","Math","floor","secs","toString","padStart","searchSongsByMood","mood","moodQueries","happy","sad","angry","calm","tired","energetic","query","toLowerCase","response","fetch","ok","Error","data","json","map","song","id","title","artist","name","duration","cover","album","cover_medium","preview","error","console","getTopSongs"],"sources":["C:/Users/nabai/Desktop/moodify/moodify/src/services/deezerapi.js"],"sourcesContent":["const API_BASE = process.env.REACT_APP_PROXY_URL || 'http://localhost:3001/api/deezer';\r\n\r\nconst formatDuration = (seconds) => {\r\n  const mins = Math.floor(seconds / 60);\r\n  const secs = seconds % 60;\r\n  return `${mins}:${secs.toString().padStart(2, '0')}`;\r\n};\r\n\r\nexport const searchSongsByMood = async (mood) => {\r\n  const moodQueries = {\r\n    happy: 'happy',\r\n    sad: 'sad',\r\n    angry: 'angry',\r\n    calm: 'chill',\r\n    tired: 'relax',\r\n    energetic: 'energy'\r\n  };\r\n\r\n  const query = moodQueries[mood.toLowerCase()] || mood;\r\n  \r\n  try {\r\n    const response = await fetch(`${API_BASE}/search?q=${query}&limit=10`);\r\n    if (!response.ok) throw new Error('Network response was not ok');\r\n    \r\n    const data = await response.json();\r\n    return data.data.map(song => ({\r\n      id: song.id,\r\n      title: song.title,\r\n      artist: song.artist.name,\r\n      duration: formatDuration(song.duration),\r\n      cover: song.album.cover_medium,\r\n      preview: song.preview\r\n    }));\r\n  } catch (error) {\r\n    console.error('Error fetching mood-based songs:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getTopSongs = async () => {\r\n  try {\r\n    const response = await fetch(`${API_BASE}/top?limit=20`);\r\n    if (!response.ok) throw new Error('Network response was not ok');\r\n    \r\n    const data = await response.json();\r\n    return data.data.map(song => ({\r\n      id: song.id,\r\n      title: song.title,\r\n      artist: song.artist.name,\r\n      duration: formatDuration(song.duration),\r\n      album: song.album.title,\r\n      cover: song.album.cover_medium,\r\n      preview: song.preview\r\n    }));\r\n  } catch (error) {\r\n    console.error('Error fetching top songs:', error);\r\n    return [];\r\n  }\r\n};"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,mBAAmB,IAAI,kCAAkC;AAEtF,MAAMC,cAAc,GAAIC,OAAO,IAAK;EAClC,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,GAAG,EAAE,CAAC;EACrC,MAAMI,IAAI,GAAGJ,OAAO,GAAG,EAAE;EACzB,OAAO,GAAGC,IAAI,IAAIG,IAAI,CAACC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;AACtD,CAAC;AAED,OAAO,MAAMC,iBAAiB,GAAG,MAAOC,IAAI,IAAK;EAC/C,MAAMC,WAAW,GAAG;IAClBC,KAAK,EAAE,OAAO;IACdC,GAAG,EAAE,KAAK;IACVC,KAAK,EAAE,OAAO;IACdC,IAAI,EAAE,OAAO;IACbC,KAAK,EAAE,OAAO;IACdC,SAAS,EAAE;EACb,CAAC;EAED,MAAMC,KAAK,GAAGP,WAAW,CAACD,IAAI,CAACS,WAAW,CAAC,CAAC,CAAC,IAAIT,IAAI;EAErD,IAAI;IACF,MAAMU,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGxB,QAAQ,aAAaqB,KAAK,WAAW,CAAC;IACtE,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAEhE,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACA,IAAI,CAACE,GAAG,CAACC,IAAI,KAAK;MAC5BC,EAAE,EAAED,IAAI,CAACC,EAAE;MACXC,KAAK,EAAEF,IAAI,CAACE,KAAK;MACjBC,MAAM,EAAEH,IAAI,CAACG,MAAM,CAACC,IAAI;MACxBC,QAAQ,EAAE/B,cAAc,CAAC0B,IAAI,CAACK,QAAQ,CAAC;MACvCC,KAAK,EAAEN,IAAI,CAACO,KAAK,CAACC,YAAY;MAC9BC,OAAO,EAAET,IAAI,CAACS;IAChB,CAAC,CAAC,CAAC;EACL,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,OAAO,EAAE;EACX;AACF,CAAC;AAED,OAAO,MAAME,WAAW,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAI;IACF,MAAMnB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGxB,QAAQ,eAAe,CAAC;IACxD,IAAI,CAACuB,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAEhE,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACA,IAAI,CAACE,GAAG,CAACC,IAAI,KAAK;MAC5BC,EAAE,EAAED,IAAI,CAACC,EAAE;MACXC,KAAK,EAAEF,IAAI,CAACE,KAAK;MACjBC,MAAM,EAAEH,IAAI,CAACG,MAAM,CAACC,IAAI;MACxBC,QAAQ,EAAE/B,cAAc,CAAC0B,IAAI,CAACK,QAAQ,CAAC;MACvCE,KAAK,EAAEP,IAAI,CAACO,KAAK,CAACL,KAAK;MACvBI,KAAK,EAAEN,IAAI,CAACO,KAAK,CAACC,YAAY;MAC9BC,OAAO,EAAET,IAAI,CAACS;IAChB,CAAC,CAAC,CAAC;EACL,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,OAAO,EAAE;EACX;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}