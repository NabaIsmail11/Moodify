{"ast":null,"code":"const clientId = process.env.REACT_APP_SPOTIFY_CLIENT_ID;\nconst clientSecret = process.env.REACT_APP_SPOTIFY_CLIENT_SECRET;\nlet accessToken = null;\nexport const getAccessToken = async () => {\n  if (accessToken) return accessToken;\n  const response = await fetch('https://accounts.spotify.com/api/token', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Authorization': 'Basic ' + btoa(`${clientId}:${clientSecret}`)\n    },\n    body: 'grant_type=client_credentials'\n  });\n  const data = await response.json();\n  accessToken = data.access_token;\n  return accessToken;\n};\n\n// Hardcoded fallback data\nconst fallbackTopSongs = [{\n  id: 1,\n  title: \"Blinding Lights\",\n  artist: \"The Weeknd\",\n  duration: 200,\n  cover: \"https://i.scdn.co/image/ab67616d00001e02a935e865e7c4b776ef753a05\",\n  preview: null\n}, {\n  id: 2,\n  title: \"Save Your Tears\",\n  artist: \"The Weeknd\",\n  duration: 215,\n  cover: \"https://i.scdn.co/image/ab67616d00001e02a935e865e7c4b776ef753a05\",\n  preview: null\n}\n// Add more songs as needed...\n];\nexport const getTopSongs = async () => {\n  try {\n    // 1. First try to get from Spotify API\n    const tokenResponse = await fetch('https://accounts.spotify.com/api/token', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Authorization': 'Basic ' + btoa(`${process.env.REACT_APP_SPOTIFY_CLIENT_ID}:${process.env.REACT_APP_SPOTIFY_CLIENT_SECRET}`)\n      },\n      body: 'grant_type=client_credentials'\n    });\n    if (!tokenResponse.ok) throw new Error('Token request failed');\n    const {\n      access_token\n    } = await tokenResponse.json();\n    const playlistResponse = await fetch('https://api.spotify.com/v1/playlists/37i9dQZEVXbMDoHDwVN2tF/tracks?limit=50', {\n      headers: {\n        'Authorization': `Bearer ${access_token}`\n      }\n    });\n    if (!playlistResponse.ok) throw new Error('Playlist request failed');\n    const {\n      items\n    } = await playlistResponse.json();\n    return items.map(({\n      track\n    }, index) => {\n      var _track$album$images$;\n      return {\n        id: track.id,\n        rank: index + 1,\n        title: track.name,\n        artist: track.artists.map(a => a.name).join(', '),\n        duration: Math.floor(track.duration_ms / 1000),\n        cover: (_track$album$images$ = track.album.images[0]) === null || _track$album$images$ === void 0 ? void 0 : _track$album$images$.url,\n        preview: track.preview_url || null\n      };\n    });\n  } catch (error) {\n    console.error('Using fallback data due to error:', error);\n    // 2. Fallback to hardcoded data if API fails\n    return fallbackTopSongs.map((song, index) => ({\n      ...song,\n      rank: index + 1\n    }));\n  }\n};","map":{"version":3,"names":["clientId","process","env","REACT_APP_SPOTIFY_CLIENT_ID","clientSecret","REACT_APP_SPOTIFY_CLIENT_SECRET","accessToken","getAccessToken","response","fetch","method","headers","btoa","body","data","json","access_token","fallbackTopSongs","id","title","artist","duration","cover","preview","getTopSongs","tokenResponse","ok","Error","playlistResponse","items","map","track","index","_track$album$images$","rank","name","artists","a","join","Math","floor","duration_ms","album","images","url","preview_url","error","console","song"],"sources":["C:/Users/nabai/Desktop/moodify/moodify/src/services/spotifyapi.js"],"sourcesContent":["const clientId = process.env.REACT_APP_SPOTIFY_CLIENT_ID;\r\nconst clientSecret = process.env.REACT_APP_SPOTIFY_CLIENT_SECRET;\r\n\r\nlet accessToken = null;\r\n\r\nexport const getAccessToken = async () => {\r\n  if (accessToken) return accessToken;\r\n\r\n  const response = await fetch('https://accounts.spotify.com/api/token', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n      'Authorization': 'Basic ' + btoa(`${clientId}:${clientSecret}`)\r\n    },\r\n    body: 'grant_type=client_credentials'\r\n  });\r\n\r\n  const data = await response.json();\r\n  accessToken = data.access_token;\r\n  return accessToken;\r\n};\r\n\r\n// Hardcoded fallback data\r\nconst fallbackTopSongs = [\r\n  {\r\n    id: 1,\r\n    title: \"Blinding Lights\",\r\n    artist: \"The Weeknd\",\r\n    duration: 200,\r\n    cover: \"https://i.scdn.co/image/ab67616d00001e02a935e865e7c4b776ef753a05\",\r\n    preview: null\r\n  },\r\n  {\r\n    id: 2,\r\n    title: \"Save Your Tears\",\r\n    artist: \"The Weeknd\",\r\n    duration: 215,\r\n    cover: \"https://i.scdn.co/image/ab67616d00001e02a935e865e7c4b776ef753a05\",\r\n    preview: null\r\n  },\r\n  // Add more songs as needed...\r\n];\r\n\r\nexport const getTopSongs = async () => {\r\n  try {\r\n    // 1. First try to get from Spotify API\r\n    const tokenResponse = await fetch('https://accounts.spotify.com/api/token', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n        'Authorization': 'Basic ' + btoa(`${process.env.REACT_APP_SPOTIFY_CLIENT_ID}:${process.env.REACT_APP_SPOTIFY_CLIENT_SECRET}`)\r\n      },\r\n      body: 'grant_type=client_credentials'\r\n    });\r\n\r\n    if (!tokenResponse.ok) throw new Error('Token request failed');\r\n    \r\n    const { access_token } = await tokenResponse.json();\r\n\r\n    const playlistResponse = await fetch('https://api.spotify.com/v1/playlists/37i9dQZEVXbMDoHDwVN2tF/tracks?limit=50', {\r\n      headers: { 'Authorization': `Bearer ${access_token}` }\r\n    });\r\n\r\n    if (!playlistResponse.ok) throw new Error('Playlist request failed');\r\n    \r\n    const { items } = await playlistResponse.json();\r\n    \r\n    return items.map(({ track }, index) => ({\r\n      id: track.id,\r\n      rank: index + 1,\r\n      title: track.name,\r\n      artist: track.artists.map(a => a.name).join(', '),\r\n      duration: Math.floor(track.duration_ms / 1000),\r\n      cover: track.album.images[0]?.url,\r\n      preview: track.preview_url || null\r\n    }));\r\n\r\n  } catch (error) {\r\n    console.error('Using fallback data due to error:', error);\r\n    // 2. Fallback to hardcoded data if API fails\r\n    return fallbackTopSongs.map((song, index) => ({\r\n      ...song,\r\n      rank: index + 1\r\n    }));\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}